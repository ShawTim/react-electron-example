{"version":3,"sources":["datastore.config.ts","datastore.ts","features/system/api.ts","features/system/slice.ts","features/contact/api.ts","features/contact/slice.ts","app/store.ts","app/hooks.ts","components/ContactList.tsx","components/ContactView.tsx","pages/ContactPage/index.tsx","pages/LoginPage/index.tsx","pages/InitPage/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["defaultContacts","encrypt","message","secret","CryptoJS","AES","toString","decrypt","ciphertext","enc","Utf8","checkDatabaseExist","a","isElectron","fs","window","require","open","CONFIG","code","console","error","sessionStorage","getItem","loadContacts","readFile","bytes","str","JSON","parse","storeContacts","contacts","stringify","writeFile","setItem","checkDatabase","initDatabase","password","map","contact","id","uuidv4","login","initialState","hasInit","hasLogin","loginFailed","createAsyncThunk","checkDatabaseAPI","initDatabaseAPI","loginAPI","success","systemSlice","createSlice","name","reducers","logout","extraReducers","builder","addCase","fulfilled","state","action","payload","meta","arg","actions","getContacts","saveContact","trueContact","index","findIndex","c","newContact","newContacts","concat","deleteContact","filter","getContactsAPI","saveContactAPI","deleteContactAPI","contactSlice","reduce","history","createBrowserHistory","basename","process","rootReducer","combineReducers","router","connectRouter","system","systemReducer","contactReducer","store","configureStore","reducer","middleware","getDefaultMiddleware","routerMiddleware","useAppDispatch","useDispatch","useAppSelector","useSelector","highlight","search","toLowerCase","includes","regexp","RegExp","tokens","split","matched","match","token","i","className","log","Fragment","ContactList","props","onSelect","onCreate","useState","setSearch","filteredContacts","setFilteredContacts","onSearchChange","useCallback","ev","target","value","onCreateBtnClick","useEffect","lowerValue","phone","email","address","Form","Group","FormText","as","FormControl","type","onChange","title","Button","variant","onClick","length","ListGroup","Item","defaultProps","ContactView","edit","onSave","onClose","isEditing","setIsEditing","setName","setPhone","setEmail","setAddress","isEmailValid","setIsEmailValid","emailValidator","onEditBtnClick","onCloseBtnClick","onSaveBtnClick","onCancelBtnClick","onNameChange","onPhoneChange","onEmailChange","onAddressChange","FormGroup","Row","FormLabel","column","xs","Col","placeholder","isInvalid","Feedback","rows","disabled","line","ContactPage","dispatch","useHistory","useParams","setContacts","isCreate","location","pathname","startsWith","contactMap","Object","values","sort","b","localeCompare","onSelectContact","push","onCloseContact","onCreateContact","onSaveContact","Container","fluid","to","LoginPage","setPassword","onPasswordChange","onLoginBtnClick","close","sm","md","Alert","show","InputGroup","Prepend","Text","InitPage","confirmPassword","setConfirmPassword","onConfirmPasswordChange","onSetupBtnClick","App","path","render","Boolean","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.3a60ba2e.chunk.js","sourcesContent":["import { ContactContent } from './features/contact/slice';\n\nexport const defaultContacts: ContactContent[] = [{\n  \"name\": \"Jaime Banks\",\n  \"phone\": \"(08) 9345 2040\",\n  \"email\": \"jbanks298@sknabemiaj.net\",\n  \"address\": \"995 Harrison Loop\\nFresno, Utah 16361\"\n}, {\n  \"name\": \"Angelina Pham\",\n  \"phone\": \"780-752-4296\",\n  \"email\": \"apham153@mahpanilegna.biz\",\n  \"address\": \"987 Buchanan Lane\\nCharleston, Kansas 96551\"\n}, {\n  \"name\": \"Bradley Norton\",\n  \"phone\": \"0131 240 0801\",\n  \"email\": \"bnorton872@notronyeldarb.net\",\n  \"address\": \"172 7th Lane\\nColorado Springs, Louisiana 75953\"\n}, {\n  \"name\": \"Ebony Montgomery\",\n  \"phone\": \"01934 623526\",\n  \"email\": \"emontgomery714@yremogtnomynobe.com\",\n  \"address\": \"768 McKinley Alley\\nNorfolk, Wyoming 99290\"\n}, {\n  \"name\": \"Jordan Moreno\",\n  \"phone\": \"(814) 542-4414\",\n  \"email\": \"jmoreno470@oneromnadroj.com\",\n  \"address\": \"161 Pecan Loop\\nPasadena, Minnesota 65295\"\n}];\n\nexport default {\n  datastorePath: \"./contacts.data\",\n  defaultContacts,\n};","import CryptoJS from 'crypto-js';\nimport isElectron from 'is-electron';\n\nimport CONFIG from './datastore.config';\nimport { Contact } from './features/contact/slice';\n\nexport const encrypt = (message: string, secret: string): string => {\n  const ciphertext = CryptoJS.AES.encrypt(message, secret).toString();\n  return ciphertext;\n};\n\nexport const decrypt = (ciphertext: string, secret: string): string => {\n  const bytes = CryptoJS.AES.decrypt(ciphertext, secret);\n  const message = bytes.toString(CryptoJS.enc.Utf8);\n  return message;\n};\n\nexport const checkDatabaseExist = async (): Promise<Boolean> => {\n  if (isElectron()) {\n    try {\n      const fs = window.require(\"fs/promises\");\n      await fs.open(CONFIG.datastorePath, \"r+\");\n    } catch (e) {\n      if (e.code !== \"ENOENT\") {\n        console.error(e);\n      }\n      return false;\n    }\n    return true;\n  } else {\n    return !!sessionStorage.getItem(\"contacts\");\n  }\n};\n\nexport const loadContacts = async (secret: string): Promise<Contact[]> => {\n  try {\n    if (isElectron()) {\n      const fs = window.require(\"fs/promises\");\n      const bytes = await fs.readFile(CONFIG.datastorePath);\n      const ciphertext = bytes.toString(\"utf8\");\n      const str = decrypt(ciphertext, secret);\n      return (JSON.parse(str) as Contact[]);\n    } else {\n      const ciphertext = sessionStorage.getItem(\"contacts\") || \"\";\n      const str = decrypt(ciphertext, secret);\n      return (JSON.parse(str) as Contact[]);\n    }\n  } catch (e) {\n    console.error(e);\n    throw e;\n  }\n};\n\nexport const storeContacts = async (contacts: Contact[], secret: string): Promise<void> => {\n  try {\n    if (isElectron()) {\n      const fs = window.require(\"fs/promises\");\n      const ciphertext = encrypt(JSON.stringify(contacts), secret);\n      await fs.writeFile(CONFIG.datastorePath, ciphertext);\n    } else {\n      sessionStorage.setItem(\"contacts\", encrypt(JSON.stringify(contacts), secret));\n    }\n  } catch (e) {\n    console.error(e);\n    throw e;\n  }\n};","import { v4 as uuidv4 } from 'uuid';\nimport { checkDatabaseExist, loadContacts, storeContacts } from '../../datastore';\nimport { defaultContacts } from '../../datastore.config';\n\nexport const checkDatabase = async (): Promise<Boolean> => await checkDatabaseExist();\n\nexport const initDatabase = async (password: string): Promise<void> =>\n  storeContacts(defaultContacts.map((contact) => ({ ...contact, id: uuidv4() })), password);\n\nexport const login = async (password: string): Promise<Boolean> => {\n  try {\n    loadContacts(password);\n    return true;  \n  } catch (e) {\n    // wrong password for decrypt, or fail to parse the decrypted JSON\n    return false;\n  }\n};","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { checkDatabase as checkDatabaseAPI, initDatabase as initDatabaseAPI, login as loginAPI } from './api';\n\nexport type UserState = {\n  hasInit: Boolean;\n  hasLogin: Boolean;\n  loginFailed: Boolean;\n  secret: string;\n};\n\nconst initialState: UserState = {\n  hasInit: false,\n  hasLogin: false,\n  loginFailed: false,\n  secret: \"\",\n};\n\nexport const checkDatabase = createAsyncThunk(\n  'system/checkDatabase',\n  async () => {\n    const hasInit = await checkDatabaseAPI();\n    return hasInit;\n  }\n);\nexport const initDatabase = createAsyncThunk(\n  'system/initDatabase',\n  async (password: string) => {\n    await initDatabaseAPI(password);\n  }\n);\nexport const login = createAsyncThunk(\n  'system/login',\n  async (password: string) => {\n    const success = await loginAPI(password);\n    return success;\n  }\n);\n\nexport const systemSlice = createSlice({\n  name: 'system',\n  initialState,\n  reducers: {\n    logout: () => initialState,\n  },\n  extraReducers: (builder) => builder\n    .addCase(checkDatabase.fulfilled, (state, action) => {\n      state.hasInit = action.payload;\n    })\n    .addCase(initDatabase.fulfilled, (state, action) => {\n      state.hasInit = true;\n      state.hasLogin = true;\n      state.secret = action.meta.arg;\n    })\n    .addCase(login.fulfilled, (state, action) => {\n      const success = action.payload;\n      state.hasLogin = success;\n      state.loginFailed = !success;\n      if (success) {\n        state.secret = action.meta.arg;\n      }\n    })\n});\n\nexport const { logout } = systemSlice.actions;\n\nexport default systemSlice.reducer;\n","import { v4 as uuidv4 } from 'uuid';\nimport { loadContacts, storeContacts } from '../../datastore';\nimport { Contact, ContactContent } from \"./slice\";\n\nexport const getContacts = async (secret: string): Promise<Array<Contact>> => {\n  try {\n    return await loadContacts(secret);\n  } catch (e) {\n    throw e;\n  }\n};\n\nexport const saveContact = async (contact: Contact | ContactContent, secret: string): Promise<Contact> => {\n  try {\n    const contacts = await loadContacts(secret);\n    const trueContact = contact as Contact;\n    const index = contacts.findIndex((c) => c.id === (trueContact.id ?? \"\"));\n    if (index >= 0 && trueContact.id) {\n      contacts[index] = trueContact;\n      await storeContacts(contacts, secret);\n      return trueContact;\n    } else {\n      const newContact = { ...contact, id: uuidv4()};\n      const newContacts = contacts.concat(newContact);\n      await storeContacts(newContacts, secret);\n      return newContact;\n    }\n  } catch (e) {\n    throw e;\n  }\n};\n\nexport const deleteContact = async (contact: Contact, secret: string): Promise<void> => {\n  try {\n    const contacts = await loadContacts(secret);\n    const newContacts = contacts.filter((c) => c.id !== contact.id);\n    await storeContacts(newContacts, secret);\n  } catch (e) {\n    throw e;\n  }\n};\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport {\n  getContacts as getContactsAPI,\n  saveContact as saveContactAPI,\n  deleteContact as deleteContactAPI\n} from './api';\n\nexport type ContactContent = {\n  name: string,\n  phone: string,\n  email: string,\n  address: string,\n};\nexport type Contact = ContactContent & {\n  id: string,\n};\nexport type ContactState = {\n  contacts: {\n    [id: string]: Contact,\n  };\n};\n\nconst initialState: ContactState = {\n  contacts: {},\n};\n\nexport const getContacts = createAsyncThunk(\n  'contact/get',\n  async ({ secret }: { secret: string }) => {\n    const contacts = await getContactsAPI(secret);\n    return contacts;\n  }\n);\nexport const saveContact = createAsyncThunk(\n  'contact/save',\n  async ({ contact, secret } : { contact: Contact | ContactContent, secret: string }) => {\n    const newContact = await saveContactAPI(contact, secret);\n    return newContact;\n  }\n);\nexport const deleteContact = createAsyncThunk(\n  'contact/delete',\n  async ({ contact, secret } : { contact: Contact, secret: string }) => {\n    await deleteContactAPI(contact, secret);\n    return contact;\n  }\n);\n\nexport const contactSlice = createSlice({\n  name: 'contact',\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => builder\n    .addCase(getContacts.fulfilled, (state, action) => {\n      const contacts = action.payload;\n      state.contacts = contacts.reduce((map, contact) => ({ ...map, [contact.id]: contact }), {});\n    })\n    .addCase(saveContact.fulfilled, (state, action) => {\n      const contact = action.payload;\n      state.contacts[contact.id] = contact;\n    })\n    .addCase(deleteContact.fulfilled, (state, action) => {\n      const contact = action.payload;\n      delete state.contacts[contact.id];\n    }),\n});\n\nexport default contactSlice.reducer;\n","import { configureStore, combineReducers, ThunkAction, Action } from '@reduxjs/toolkit';\nimport { createBrowserHistory } from 'history';\nimport { connectRouter, routerMiddleware } from 'connected-react-router';\n\nimport systemReducer from '../features/system/slice';\nimport contactReducer from '../features/contact/slice';\n\nexport const history = createBrowserHistory({ basename: process.env.PUBLIC_URL });\n\nexport const rootReducer = combineReducers({\n  router: connectRouter(history),\n  system: systemReducer,\n  contact: contactReducer,\n});\n\nexport const store = configureStore({\n  reducer: rootReducer,\n  middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(routerMiddleware(history)),\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { Button, Form, FormControl, FormText, ListGroup } from 'react-bootstrap';\nimport { Contact } from '../features/contact/slice';\n\nexport type ContactListProps = {\n  contacts: Contact[],\n  onSelect: (id: string) => void,\n  onCreate: () => void,\n};\n\n// highlight the matched string in the provided string\nconst highlight = (str: string, search: string) => {\n  if (str.toLowerCase().includes(search.toLowerCase())) {\n    const regexp = new RegExp(search, \"ig\");\n    const tokens = str.split(regexp);\n    const matched = str.match(regexp);\n    return tokens.map((token, i) => {\n      const match = i > 0 ? <mark className=\"p-0\">{matched?.[i-1] ?? \"\"}</mark> : \"\";\n      console.log(match, token, matched);\n      return (<React.Fragment key={`token-${token}-${i}`}>{match}{token}</React.Fragment>);\n    });\n  } else {\n    return str;\n  }\n};\n\nconst ContactList = (props: ContactListProps) => {\n  const { contacts, onSelect, onCreate } = props;\n  const [search, setSearch] = useState<string>(\"\");\n  const [filteredContacts, setFilteredContacts] = useState<Contact[]>(contacts);\n\n  const onSearchChange = useCallback((ev: React.ChangeEvent<HTMLInputElement>) => setSearch(ev.target.value), []);\n  const onCreateBtnClick = useCallback(() => onCreate(), [onCreate]);\n\n  // whenever \"search\"/\"contacts\" changed, filter the contacts with \"search\"\n  useEffect(() => {\n    if (search) {\n      setFilteredContacts(contacts.filter((contact) => {\n        const lowerValue = search.toLowerCase();\n        return (\n          contact.name.toLowerCase().includes(lowerValue) ||\n          contact.phone.toLowerCase().includes(lowerValue) ||\n          contact.email.toLowerCase().includes(lowerValue) ||\n          contact.address.toLowerCase().includes(lowerValue)\n        );\n      }));\n    } else {\n      setFilteredContacts(contacts);\n    }\n  }, [search, contacts]);\n\n  return (\n    <>\n      <nav className=\"d-flex justify-content-end border-bottom\">\n        <Form.Group className=\"w-100 d-flex align-items-center\">\n          <FormText as=\"i\" className=\"position-absolute bi bi-search ms-2\" />\n          <FormControl\n            className=\"border-0 ps-4\"\n            type=\"search\"\n            value={search}\n            onChange={onSearchChange}\n            title=\"Search Contacts\"\n            aria-label=\"Search Contacts\" />\n        </Form.Group>\n        <Button variant=\"light\" title=\"Add New Contact\" aria-label=\"Add New Contact\" onClick={onCreateBtnClick}>\n          <i className=\"bi bi-plus-lg\"></i>\n        </Button>\n      </nav>\n      {!!filteredContacts.length ? (\n        <ListGroup className=\"data-list mb-3\">\n          {filteredContacts.map((contact) =>\n            <ListGroup.Item\n              key={contact.id}\n              className=\"d-flex text-truncate border-0 border-bottom\"\n              action\n              onClick={() => onSelect(contact.id)}>\n              <FormText as=\"i\" className=\"bi bi-person-circle me-2\" />\n              <FormText as=\"label\" className=\"text-dark me-2\">{highlight(contact.name, search)}</FormText>\n              <FormText className=\"ms-auto text-truncate\"><small>{highlight(contact.phone, search)}</small></FormText>\n            </ListGroup.Item>\n          )}\n        </ListGroup>\n      ) : (\n        <div className=\"h-100 d-flex justify-content-center align-items-center\">{!!search ? \"No Matched Contacts.\" : \"No Contacts.\"}</div>\n      )}\n    </>\n  );\n};\n\nContactList.defaultProps = {\n  contacts: [],\n  onSelect: () => undefined,\n  onCreate: () => undefined,\n};\n\nexport default ContactList;","import React, { useCallback, useEffect, useState } from 'react';\nimport { Button, Col, Form, FormControl, FormGroup, FormLabel, Row } from 'react-bootstrap';\nimport * as emailValidator from 'email-validator';\n\nimport { Contact, ContactContent } from '../features/contact/slice';\n\nexport type ContactViewProps = {\n  contact: Contact | null | undefined,\n  edit: Boolean,\n  onSave: (contact: Contact | ContactContent) => void,\n  onClose: () => void,\n};\n\nconst ContactView = (props: ContactViewProps) => {\n  const { contact, edit, onSave, onClose } = props;\n  const [isEditing, setIsEditing] = useState<Boolean>(edit);\n  const [name, setName] = useState<string>(contact?.name ?? \"\");\n  const [phone, setPhone] = useState<string>(contact?.phone ?? \"\");\n  const [email, setEmail] = useState<string>(contact?.email ?? \"\");\n  const [address, setAddress] = useState<string>(contact?.address ?? \"\");\n  const [isEmailValid, setIsEmailValid] = useState<Boolean>(true);\n\n  // reset state whenever given contact changed\n  useEffect(() => {\n    setIsEditing(false);\n    setName(contact?.name ?? \"\");\n    setPhone(contact?.phone ?? \"\");\n    setEmail(contact?.email ?? \"\");\n    setAddress(contact?.address ?? \"\");\n  }, [contact]);\n\n  // if \"edit\" is provided with true, open contact view with editing mode\n  useEffect(() => setIsEditing(edit), [edit]);\n\n  // validate email format\n  useEffect(() => setIsEmailValid(!email || emailValidator.validate(email)), [email]);\n\n  const onEditBtnClick = useCallback(() => setIsEditing(true), []);\n  const onCloseBtnClick = useCallback(() => onClose(), [onClose]);\n  const onSaveBtnClick = useCallback(() => {\n    if (name && phone && email && address && isEmailValid) {\n      onSave({ id: contact?.id, name, phone, email, address });\n      setIsEditing(false);\n    }\n  }, [contact, name, phone, email, address, isEmailValid, onSave]);\n  const onCancelBtnClick = useCallback(() => edit ? onClose() : setIsEditing(false), [edit, onClose]);\n  const onNameChange = useCallback((ev: React.ChangeEvent<HTMLInputElement>) => setName(ev.target.value), []);\n  const onPhoneChange = useCallback((ev: React.ChangeEvent<HTMLInputElement>) => setPhone(ev.target.value), []);\n  const onEmailChange = useCallback((ev: React.ChangeEvent<HTMLInputElement>) => setEmail(ev.target.value), []);\n  const onAddressChange = useCallback((ev: React.ChangeEvent<HTMLInputElement>) => setAddress(ev.target.value), []);\n\n  // if no contacts provided, and it's not open in edit mode, render nth\n  if (!contact && !edit) {\n    return null;\n  }\n\n  return (\n    <>\n      <nav className=\"d-flex justify-content-end border-bottom\">\n        {!isEditing && (\n          <Button variant=\"light\" title=\"Edit this Contact\" aria-label=\"Edit this Contact\" onClick={onEditBtnClick}>\n            <i className=\"bi bi-pencil-fill\"></i>\n          </Button>\n        )}\n        <Button variant=\"light\" title=\"Close this Contact\" aria-label=\"Close this Contact\" onClick={onCloseBtnClick}>\n          <i className=\"bi bi-x-lg\"></i>\n        </Button>\n      </nav>\n      {isEditing ? (\n        <div className=\"d-flex flex-column p-5\">\n          <h1 className=\"align-self-center display-1\"><i className=\"bi bi-person-circle\"></i></h1>\n          <Form className=\"m-3\">\n            <FormGroup as={Row} className=\"mt-1\">\n              <FormLabel column xs={3} className=\"text-nowrap\"><i className=\"bi bi-person me-2\"></i>Name</FormLabel>\n              <Col xs={9}>\n                <FormControl type=\"text\" placeholder=\"Name\" value={name} onChange={onNameChange} />\n              </Col>\n            </FormGroup>\n            <FormGroup as={Row} className=\"mt-1\">\n              <FormLabel column xs={3} className=\"text-nowrap\"><i className=\"bi bi-telephone me-2\"></i>Phone</FormLabel>\n              <Col xs={9}>\n                <FormControl type=\"tel\" placeholder=\"Phone\" value={phone} onChange={onPhoneChange} />\n              </Col>\n            </FormGroup>\n            <FormGroup as={Row} className=\"mt-1\">\n              <FormLabel column xs={3} className=\"text-nowrap\"><i className=\"bi bi-envelope me-2\"></i>Email</FormLabel>\n              <Col xs={9}>\n                <FormControl type=\"email\" placeholder=\"Email\" value={email} isInvalid={!isEmailValid} onChange={onEmailChange} />\n                <FormControl.Feedback type=\"invalid\">Not a valid email.</FormControl.Feedback>\n              </Col>\n            </FormGroup>\n            <FormGroup as={Row} className=\"mt-1\">\n              <FormLabel column xs={3} className=\"text-nowrap\"><i className=\"bi bi-house me-2\"></i>Address</FormLabel>\n              <Col xs={9}>\n                <FormControl as=\"textarea\" rows={5} placeholder=\"Address\" value={address} onChange={onAddressChange} />\n              </Col>\n            </FormGroup>\n            <FormGroup className=\"d-flex justify-content-end mt-1\">\n              <Button\n                variant=\"primary\"\n                className=\"m-1\"\n                title=\"Save this Contact\"\n                disabled={!(name && phone && email && address && isEmailValid)}\n                aria-label=\"Save this Contact\"\n                onClick={onSaveBtnClick}>\n                Save\n              </Button>\n              <Button variant=\"light\" className=\"m-1\" title=\"Back to View\" aria-label=\"Back to View\" onClick={onCancelBtnClick}>Cancel</Button>\n            </FormGroup>\n          </Form>\n        </div>\n      ) : (\n        <div className=\"d-flex flex-column p-5\">\n          <h1 className=\"align-self-center display-1\"><i className=\"bi bi-person-circle\"></i></h1>\n          <h1 className=\"align-self-center\">{name}</h1>\n          <address className=\"m-3\">\n            <div title=\"Phone\">\n              <i className=\"bi bi-telephone me-2\"></i>\n              <span>{phone}</span>\n            </div>\n            <div title=\"Email\">\n              <i className=\"bi bi-envelope me-2\"></i>\n              <span>{email}</span>\n            </div>\n            <div className=\"d-flex\" title=\"Address\">\n              <i className=\"bi bi-house me-2\"></i>\n              <span>{address.split(\"\\n\").map((line, i) => <div key={`line-${line}-${i}`}>{line}</div>)}</span>\n            </div>\n          </address>\n        </div>\n      )}\n    </>\n  );\n};\n\nContactView.defaultProps = {\n  contact: null,\n  edit: false,\n  onSave: () => undefined,\n  onClose: () => undefined,\n};\n\nexport default ContactView;","import React, { useState, useCallback, useEffect } from 'react';\nimport { Redirect, useHistory, useParams } from 'react-router-dom';\nimport { Col, Container, Row } from 'react-bootstrap';\n\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { Contact, ContactContent, getContacts, saveContact } from '../../features/contact/slice';\nimport ContactList from '../../components/ContactList';\nimport ContactView from '../../components/ContactView';\n\nconst ContactPage = () => {\n  const dispatch = useAppDispatch();\n  const history = useHistory();\n  const { id } = useParams<{ id: string }>();\n  const [contacts, setContacts] = useState<Contact[]>([]);\n  const { hasInit, hasLogin, secret } = useAppSelector((state) => state.system);\n  const isCreate = history.location.pathname.startsWith(\"/contacts/create\");\n  const contactMap = useAppSelector((state) => state.contact.contacts);\n  const contact = isCreate ? null : (contactMap[id] ?? null);\n\n  // when page load, load the contacts\n  useEffect(() => {\n    dispatch(getContacts({ secret }));\n  }, [secret, dispatch]);\n\n  // sort contacts to be array from the contact map\n  useEffect(() => {\n    setContacts(Object.values(contactMap).sort((a, b) => a.name.localeCompare(b.name)));\n  }, [contactMap]);\n\n  // handler for selecting contact, redirect URL to open contact view\n  const onSelectContact = useCallback((id: string) => history.push(`/contacts/view/${id}`), [history]);\n  // handler for closing opened contact, redirect URL to close contact view\n  const onCloseContact = useCallback(() => history.push(\"/contacts\"), [history]);\n  // handler for clicking create button, redirect URL to open create contact view\n  const onCreateContact = useCallback(() => history.push(\"/contacts/create\"), [history]);\n  // handler for saving contact, and then redirect URL to close contact view\n  const onSaveContact = useCallback((contact: Contact | ContactContent) => {\n    dispatch(saveContact({ contact, secret }));\n    history.push(\"/contacts\");\n  }, [secret, history, dispatch]);\n\n  // app not yet init, go to init page\n  if (!hasInit) {\n    return <Redirect to=\"/\" />;\n  }\n  \n  // user not yet login, go to login page\n  if (!hasLogin) {\n    return <Redirect to=\"/login\" />;\n  }\n\n  return (\n    <Container fluid className=\"h-100 border rounded\">\n      <Row className=\"h-100\">\n        <Col xs={4} className=\"h-100 p-0 border-end\">\n          <ContactList contacts={contacts} onSelect={onSelectContact} onCreate={onCreateContact} />\n        </Col>\n        <Col xs={8} className=\"h-100 p-0\">\n          <ContactView contact={contact} edit={isCreate} onClose={onCloseContact} onSave={onSaveContact} />\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default ContactPage;","import React, { useState, useCallback, useEffect } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { InputGroup, FormControl, Button, Col, Container, Row, Alert } from 'react-bootstrap';\n\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { login } from '../../features/system/slice';\n\nconst LoginPage = () => {\n  const dispatch = useAppDispatch();\n  const { hasInit, hasLogin, loginFailed } = useAppSelector((state) => state.system);\n  const [password, setPassword] = useState<string>(\"\");\n\n  const onPasswordChange = useCallback((ev: React.ChangeEvent<HTMLInputElement>) => setPassword(ev.target.value), []);\n  const onLoginBtnClick = useCallback(() => dispatch(login(password)), [password, dispatch]);\n  const onCloseBtnClick = useCallback(() => window.close(), []);\n\n  // app not yet init, go to init page\n  if (!hasInit) {\n    return <Redirect to=\"/\" />;\n  }\n  \n  // user already login, go to contact page\n  if (hasLogin) {\n    return <Redirect to=\"/contacts\" />;\n  }\n\n  return (\n    <Container>\n      <Row>\n        <Col className=\"text-center m-2\">\n          <h3>Welcome to Simple Secure Contact Manager</h3>\n        </Col>\n      </Row>\n      <Row>\n        <Col className=\"text-center m-3\">\n          <h5>Please enter the password for your contact data file.</h5>\n        </Col>\n      </Row>\n      <Row className=\"justify-content-center\">\n        <Col xs={12} sm={8} md={6}>\n          <Alert show={!!loginFailed} variant=\"danger\">Password mismatch. Failed to open the application.</Alert>\n          <InputGroup className=\"mb-3\">\n            <InputGroup.Prepend>\n              <InputGroup.Text id=\"password-desc\">\n                <i className=\"bi bi-key-fill\"></i>\n              </InputGroup.Text>\n            </InputGroup.Prepend>\n            <FormControl\n              id=\"password\"\n              type=\"password\"\n              value={password}\n              placeholder=\"Password\"\n              aria-label=\"Password\"\n              aria-describedby=\"password-desc\"\n              onChange={onPasswordChange} />\n          </InputGroup>\n        </Col>\n      </Row>\n      <Row>\n        <Col className=\"d-flex justify-content-center\">\n          <Button className=\"m-2\" variant=\"primary\" onClick={onLoginBtnClick}>Open the App</Button>\n          <Button className=\"m-2\" variant=\"light\" onClick={onCloseBtnClick}>Close</Button>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default LoginPage;","import React, { useState, useCallback, useEffect } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { InputGroup, FormControl, Button, Col, Container, Row } from 'react-bootstrap';\n\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { initDatabase } from '../../features/system/slice';\n\ndeclare const window: any;\n\nconst InitPage = () => {\n  const dispatch = useAppDispatch();\n  const { hasInit, hasLogin } = useAppSelector((state) => state.system);\n  const [password, setPassword] = useState<string>(\"\");\n  const [confirmPassword, setConfirmPassword] = useState<string>(\"\");\n\n  const onPasswordChange = useCallback((ev: React.ChangeEvent<HTMLInputElement>) => setPassword(ev.target.value), []);\n  const onConfirmPasswordChange = useCallback((ev: React.ChangeEvent<HTMLInputElement>) => setConfirmPassword(ev.target.value), []);\n  const onSetupBtnClick = useCallback(() => {\n    if (!!password && password === confirmPassword) {\n      dispatch(initDatabase(password));\n    }\n  }, [password, confirmPassword, dispatch]);\n  const onCloseBtnClick = useCallback(() => window.close(), []);\n  \n  // user already login, go to contact page\n  if (hasLogin) {\n    return <Redirect to=\"/contacts\" />;\n  }\n\n  // app already init, go to login page\n  if (hasInit) {\n    return <Redirect to=\"/login\" />;\n  }\n\n  return (\n    <Container>\n      <Row>\n        <Col className=\"text-center m-2\">\n          <h3>Initialization Wizard</h3>\n        </Col>\n      </Row>\n      <Row>\n        <Col className=\"text-center m-3\">\n          <h5>Please setup a password for the Simple Secure Contact Manager.</h5>\n        </Col>\n      </Row>\n      <Row className=\"justify-content-center\">\n        <Col xs={12} sm={8} md={6}>\n          <InputGroup className=\"mb-3\">\n            <InputGroup.Prepend>\n              <InputGroup.Text id=\"password-desc\">\n                <i className=\"bi bi-key-fill\"></i>\n              </InputGroup.Text>\n            </InputGroup.Prepend>\n            <FormControl\n              id=\"password\"\n              type=\"password\"\n              value={password}\n              placeholder=\"Password\"\n              aria-label=\"Password\"\n              aria-describedby=\"password-desc\"\n              onChange={onPasswordChange} />\n          </InputGroup>\n        </Col>\n      </Row>\n      <Row className=\"justify-content-center\">\n        <Col xs={12} sm={8} md={6}>\n          <InputGroup className=\"mb-3\">\n            <InputGroup.Prepend>\n              <InputGroup.Text id=\"confirm-password-desc\">\n                <i className=\"bi bi-key-fill\"></i>\n              </InputGroup.Text>\n            </InputGroup.Prepend>\n            <FormControl\n              id=\"confirm-password\"\n              type=\"password\"\n              value={confirmPassword}\n              isInvalid={!!confirmPassword && password !== confirmPassword}\n              placeholder=\"Confirm Password\"\n              aria-label=\"Confirm Password\"\n              aria-describedby=\"confirm-password-desc\"\n              onChange={onConfirmPasswordChange} />\n            <FormControl.Feedback type=\"invalid\">Password not match.</FormControl.Feedback>\n          </InputGroup>\n        </Col>\n      </Row>\n      <Row>\n        <Col className=\"d-flex justify-content-center\">\n          <Button className=\"m-2\" variant=\"primary\" onClick={onSetupBtnClick} disabled={!password || password !== confirmPassword}>Setup</Button>\n          <Button className=\"m-2\" variant=\"light\" onClick={onCloseBtnClick}>Close</Button>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default InitPage;","import React, { useEffect } from 'react';\nimport { ConnectedRouter } from 'connected-react-router';\nimport { Route, Switch } from 'react-router';\n\nimport { history } from './app/store';\nimport ContactPage from './pages/ContactPage';\nimport LoginPage from './pages/LoginPage';\nimport InitPage from './pages/InitPage';\n\nimport './App.scss';\nimport { useAppDispatch } from './app/hooks';\nimport { checkDatabase } from './features/system/slice';\n\nconst App = () => {\n  const dispatch = useAppDispatch();\n\n  // when app load, check the database status and see whether it needs to initialize\n  useEffect(() => {\n    dispatch(checkDatabase());\n  }, [dispatch]);\n\n  return (\n    <ConnectedRouter history={history}>\n      <Switch>\n        <Route path={[\"/contacts/view/:id\", \"/contacts/create\", \"/contacts\"]} render={() => <ContactPage />} />\n        <Route path=\"/login\" render={() => <LoginPage />} />\n        <Route path=\"/\" render={() => <InitPage />} />\n      </Switch>\n    </ConnectedRouter>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport App from './App';\nimport { store } from './app/store';\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.css';\nimport 'normalize.css/normalize.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap-icons/font/bootstrap-icons.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}